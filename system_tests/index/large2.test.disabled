# This test generates three primes-filled files, records each of them in
# a data store, extracts them and compares the resulting output to the
# original files. All three files are added in a single transaction.


# %S = the test source directory
# %binaries = the directories containing the executable binaries
# %t = temporary file name unique to the test


# Delete any existing results.
RUN: rm -rf "%t" && mkdir -p "%t"


# Generate test data: three files full of 32-bit big-endian primes.
RUN: "%binaries/pstore-sieve" --endian=big --maximum=10000000 -o "%t/p1e7.bin"
RUN: "%binaries/pstore-sieve" --endian=big --maximum=20000000 -o "%t/p2e7.bin"
RUN: "%binaries/pstore-sieve" --endian=big --maximum=30000000 -o "%t/p3e7.bin"

# Copy the three files into the data store with the keys 'p1e7', 'p2e7', and
# 'p3e7' respectively. Each is recorded in a separate transaction.
RUN: "%binaries/pstore-write" "--add-file=p1e7,%t/p1e7.bin" "%t/large2.db"
RUN: "%binaries/pstore-write" "--add-file=p2e7,%t/p2e7.bin" "%t/large2.db"
RUN: "%binaries/pstore-write" "--add-file=p3e7,%t/p3e7.bin" "%t/large2.db"

# Read the three keys and extract the resulting data in correspondingly named files
# in the test output directory
RUN: "%binaries/pstore-read" "%t/large2.db" p1e7 > "%t/p1e7"
RUN: "%binaries/pstore-read" "%t/large2.db" p2e7 > "%t/p2e7"
RUN: "%binaries/pstore-read" "%t/large2.db" p3e7 > "%t/p3e7"

# Check that the data made the round trip successfully.
RUN: diff "%t/p1e7" "%t/p1e7.bin"
RUN: diff "%t/p2e7" "%t/p2e7.bin"
RUN: diff "%t/p3e7" "%t/p3e7.bin"
