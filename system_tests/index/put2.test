# This test generates three primes-filled files, records each of them in
# a data store, extracts them and compares the resulting output to the
# original files. All three files are added in a single transaction.


# %S = the test source directory
# %binaries = the directories containing the executable binaries
# %t = temporary file name unique to the test


# Delete any existing results.
RUN: rm -rf "%t" && mkdir -p "%t"


# Generate test data: three files full of 16-bit big-endian primes.
RUN: "%binaries/pstore-sieve" --endian=big --maximum=100 -o "%t/inp100.bin"
RUN: "%binaries/pstore-sieve" --endian=big --maximum=1000 -o "%t/inp1000.bin"
RUN: "%binaries/pstore-sieve" --endian=big --maximum=10000 -o "%t/inp10000.bin"


# Copy the put1.bin file into the data store with the key 'p1'
RUN: "%binaries/pstore-write" "--add-file=p100,%t/inp100.bin" \
RUN:                          "--add-file=p1000,%t/inp1000.bin" \
RUN:                          "--add-file=p10000,%t/inp10000.bin" \
RUN:                          "%t/put2.db"

# Read the threes keys and extract the resulting data in correspondingly named files
# in the test output directory
RUN: "%binaries/pstore-read" "%t/put2.db" p100 > "%t/p100"
RUN: "%binaries/pstore-read" "%t/put2.db" p1000 > "%t/p1000"
RUN: "%binaries/pstore-read" "%t/put2.db" p10000 > "%t/p10000"

# Check that the data made the round trip successfully.
RUN: diff "%t/p100" "%t/inp100.bin"
RUN: diff "%t/p1000" "%t/inp1000.bin"
RUN: diff "%t/p10000" "%t/inp10000.bin"
