# This test generates three primes-filled files, records each of them in
# a data store using separate transactions. The data is then extracted and
# compared to the originals.


# %S = the test source directory
# %binaries = the directories containing the executable binaries
# %t = temporary file name unique to the test


# Delete any existing results.
RUN: rm -rf "%t" && mkdir -p "%t"



# Generate test data: three files full of 16-bit big-endian primes.
RUN: "%binaries/pstore-sieve" --endian=big --maximum=100 -o "%t/inp100.bin"
RUN: "%binaries/pstore-sieve" --endian=big --maximum=1000 -o "%t/inp1000.bin"
RUN: "%binaries/pstore-sieve" --endian=big --maximum=10000 -o "%t/inp10000.bin"


# Run the 'write' utility three times to store the three files with one transaction
# per run.
RUN: "%binaries/pstore-write" "--add-file=p100,%t/inp100.bin"     "%t/put3.db"
RUN: "%binaries/pstore-write" "--add-file=p1000,%t/inp1000.bin"   "%t/put3.db"
RUN: "%binaries/pstore-write" "--add-file=p10000,%t/inp10000.bin" "%t/put3.db"

# Read the threes keys and extract the resulting data in correspondingly named files
# in the test output directory
RUN: "%binaries/pstore-read" "%t/put3.db" p100 > "%t/p100"
RUN: "%binaries/pstore-read" "%t/put3.db" p1000 > "%t/p1000"
RUN: "%binaries/pstore-read" "%t/put3.db" p10000 > "%t/p10000"

# Check that the data made the round trip successfully.
RUN: diff "%t/p100" "%t/inp100.bin"
RUN: diff "%t/p1000" "%t/inp1000.bin"
RUN: diff "%t/p10000" "%t/inp10000.bin"
