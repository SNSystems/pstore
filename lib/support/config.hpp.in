//===- lib/support/config.hpp -----------------------------*- mode: C++ -*-===//
//*                   __ _        *
//*   ___ ___  _ __  / _(_) __ _  *
//*  / __/ _ \| '_ \| |_| |/ _` | *
//* | (_| (_) | | | |  _| | (_| | *
//*  \___\___/|_| |_|_| |_|\__, | *
//*                        |___/  *
//===----------------------------------------------------------------------===//
//
// Part of the pstore project, under the Apache License v2.0 with LLVM Exceptions.
// See https://github.com/SNSystems/pstore/blob/master/LICENSE.txt for license
// information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//

#ifndef PSTORE_CONFIG_HPP
#define PSTORE_CONFIG_HPP

/// Is pstore being compiled inside the larger LLVM framework?
#cmakedefine PSTORE_IS_INSIDE_LLVM 1

/// Is exception handling enabled?
#cmakedefine PSTORE_EXCEPTIONS 1

/// Is the host system big endian?
#cmakedefine PSTORE_IS_BIG_ENDIAN 1

/// Does the compiler support __uint128_t?
#cmakedefine PSTORE_DISABLE_UINT128_T 1
#ifndef PSTORE_DISABLE_UINT128_T
#cmakedefine PSTORE_HAVE_UINT128_T 1
#endif

/// Does the compiler support __attribute__((noreturn))?
#cmakedefine PSTORE_HAVE_ATTRIBUTE_NORETURN 1

#cmakedefine PSTORE_HAVE_NONNULL_KEYWORD 1
#cmakedefine PSTORE_HAVE_NULLABLE_KEYWORD 1

/// If the compiler support __uint128_t, does the standard library include std::is_unsigned<>?
#cmakedefine PSTORE_HAVE_UINT128_TRAITS_SUPPORT 1

#cmakedefine PSTORE_VENDOR_ID "@PSTORE_VENDOR_ID@"

/// Defined if Apple System Log API is available. Probably only on Apple platforms.
#cmakedefine PSTORE_HAVE_OSLOG_H 1

/// Defined if the POSIX syslog API is available.
#cmakedefine PSTORE_HAVE_SYS_LOG_H 1

/// Defined if <byteswap.h> is available.
#cmakedefine PSTORE_HAVE_BYTESWAP_H 1

/// Defined if <sys/endian.h> is available.
#cmakedefine PSTORE_HAVE_SYS_ENDIAN_H 1
/// Defined if <sys/syscall.h> is available.
#cmakedefine PSTORE_HAVE_SYS_SYSCALL_H 1

/// Defined if <linux/unistd.h> is available.
#cmakedefine PSTORE_HAVE_LINUX_UNISTD_H 1

/// Defined if the C11 localtime_s() API is available.
#cmakedefine PSTORE_HAVE_LOCALTIME_S 1

/// Defined if the POSIX localtime_r() API is available.
#cmakedefine PSTORE_HAVE_LOCALTIME_R 1

/// Defined if the C11 gMtime_s() API is available.
#cmakedefine PSTORE_HAVE_GMTIME_S 1

/// Defined if the POSIX gmtime_r() API is available.
#cmakedefine PSTORE_HAVE_GMTIME_R 1

/// Defined if the BSD getpagesize() API is available.
#cmakedefine PSTORE_HAVE_GETPAGESIZE 1

/// The time members of struct stat might be called st_Xtimespec (of type struct timespec)
/// or st_Xtime (and be of type time_t). This macro is defined in the former situation.
#cmakedefine PSTORE_STAT_TIMESPEC 1

#cmakedefine PSTORE_PTHREAD_SETNAME_NP_1_ARG 1
#cmakedefine PSTORE_PTHREAD_SETNAME_NP_2_ARGS 1
#cmakedefine PSTORE_PTHREAD_SETNAME_NP_3_ARGS 1
#cmakedefine PSTORE_PTHREAD_SET_NAME_NP 1

/// Defined if the `pthread_getname_np' function is available.
#cmakedefine PSTORE_PTHREAD_GETNAME_NP 1

/// Defined if the `pthread_get_name_np' function is available.
#cmakedefine PSTORE_PTHREAD_GET_NAME_NP 1

/// Is the macOS _NSGetExecutablePath() function available?
#cmakedefine PSTORE_HAVE_NSGETEXECUTABLEPATH 1

/// Is the macOS renamex_np function available?
#cmakedefine PSTORE_HAVE_RENAMEX_NP 1
/// Is the Linux-only renameat2() call available in glibc?
#cmakedefine PSTORE_HAVE_RENAMEAT2 1
/// Is the Linux-only SYS_renameat2 system call number known?
#cmakedefine PSTORE_HAVE_SYS_renameat2 1

/// Defined if std::map<> supports the insert_or_assign() member function. This was not officially
/// introduced until C++17 but is available even when compiling for C++11 on some platforms.
#cmakedefine PSTORE_STD_MAP_HAS_INSERT_OR_ASSIGN 1

/// Defined if calling data() on a non-const std::string returns a non-const char type. (This was
/// introduced with C++17.)
#cmakedefine PSTORE_HAVE_NON_CONST_STD_STRING_DATA 1

/// Defined is std::is_trivially_copyable<> is available in the standard library.
#cmakedefine PSTORE_HAVE_IS_TRIVIALLY_COPYABLE 1

#cmakedefine PSTORE_HAVE_SYS_POSIX_SHM_H 1
/// Is the <linux/fs.h> header file available?
#cmakedefine PSTORE_HAVE_LINUX_FS_H 1
/// Id the <linux/limits.h> header file available?
#cmakedefine PSTORE_HAVE_LINUX_LIMITS_H 1

/// \brief Controls whether the library validates data header and footer structures
///        with a simple CRC value.
///
/// The data store file header and footer objects normally contain CRC values to ensure the validity
/// of the structures. However, fuzzing tools have more luck in finding exciting bugs if these
/// sanity checks are disabled; that's done by making this macro false. Naturally, the checks are
/// enabled by default.
#cmakedefine PSTORE_CRC_CHECKS_ENABLED 1

/// \brief Controls whether the library validates internal structure signatures.
///
/// The data store's internal structure normally contain magic "signature" values as a basic check
/// of the file integrity. However, fuzzing tools have more luck in finding exciting bugs if these
/// sanity checks are disabled; that's done by making this macro false. Naturally, the checks are
/// enabled by default.
#cmakedefine PSTORE_SIGNATURE_CHECKS_ENABLED 1

/// \brief Controls the rate of data store file growth on POSIX systems.
///
/// Windows and Linux/Mac OS X handle memory-mapped files differently.
///
/// On Windows, if you start with an empty file and create a memory-mapped
/// view of 4Gb, then the operating system will forcibly increase the size of the file
/// to 4Gb. In essence there is a physical byte on the disk that corresponds to each
/// byte in a memory-mapped view.
///
/// By way of contrast, on our POSIX systems, it's possible to memory-mapp a region that's
/// much larger that the physical size of the file on disk. If we memory-map a view of
/// 4Gb on an empty file, then the file size is not automatically increased. If an attempt
/// is made to write to any of the mapped memory that lies beyond the end of the physical
/// file, then the process will crash. To avoid this, you must explicitly increase the size
/// of the underlying file; the advantage being that you can increase the file size on when
/// necessary for the data being stored.
///
/// The upshot of this is that our files grow in increments of the minimum allocation size
/// on Windows; a file containing 200 bytes of data will take up 4Mb. On POSIX, we have a choice:
/// follow the Windows behavior or increase the file size only as necessary. That's what this
/// this macro controls.
#cmakedefine PSTORE_POSIX_SMALL_FILES 1
#if defined(_WIN32) && PSTORE_POSIX_SMALL_FILES
// Sorry, but we can't do small files on Windows. They grow in increments of the
// minimum allocation size, like it or not.
#    undef PSTORE_POSIX_SMALL_FILES
#endif

/// \brief A debugging aid to make all data store requests "spanning".
///
/// The macro modifies the behaviour of the data store get() APIs such that an data request
/// is treated as a "spanning" request. A spanning request is one where the address data
/// record does not lie entirely within a single memory region.
///
/// This control is a debugging aid which flushes out inadvertant assumptions about the lifetime
/// of the pointers returned by database::get(). Enabling this behaviour results in every data
/// request returning a freshly allocated block of memory whose contents are copied from the
/// store. This contrasts with normal usage in which the majority of requests point directly
/// in persistent file-backed virtual memory.
#cmakedefine PSTORE_ALWAYS_SPANNING 1

#cmakedefine PSTORE_VACUUM_TOOL_NAME "@PSTORE_VACUUM_TOOL_NAME@"

#endif // PSTORE_CONFIG_HPP
